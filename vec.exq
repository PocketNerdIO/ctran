IMAGE vector
EXTERNAL olib
EXTERNAL hwim
INCLUDE epoc.h
INCLUDE p_serial.h
INCLUDE hwimman.g
INCLUDE mfne.g
INCLUDE factive.g
INCLUDE vecfile.h
CLASS vecws wserv
{
REPLACE ws_dyn_init
CONSTANTS
{
VERSION "P1.20.b5"
VERSION_SET 104
VERSION_CFG 6
VERSION_XCH 6
}
}
CLASS vecdw win
{
REPLACE wn_init
REPLACE wn_draw
REPLACE wn_key
ADD wn_beg_draw
ADD wn_beg_draw_clear
ADD wn_end_draw
ADD dw_set_size
ADD dw_get_size
ADD dw_get_srect
ADD dw_set_cursor
ADD dw_clear_bitmaps
ADD dw_clear_grey
ADD dw_set_text
ADD dw_set_disable
PROPERTY
{
INT CurOn;
INT GridOn;
INT SnapOn;
INT DrawCount;
INT TextOn;
INT Disable;
}
}
CLASS veciw bwin
{
REPLACE wn_init
REPLACE wn_draw
ADD iw_set_pos
ADD iw_update
CONSTANTS
{
IW_COMMAND 0
IW_STEP 1
IW_LOC_A 2
IW_LOC_L 3
IW_LOC_R 4
IW_LOC_P 5
IW_SNAP 6
IW_GRID 7
IW_LAYER_CUR 8
IW_LAYER_ON 9
IW_TEXT 10
IW_REG_TO 11
IW_REG_NAME 12
IW_MODE 13
IW_LOC 14
IW_LAYER 15
IW_ALL 16
}
}
CLASS vecsw bwin
{
DEFER sw_set_pos
PROPERTY
{
WORD Len;
}
}
CLASS vecvsw vecsw
{
REPLACE wn_init
REPLACE wn_draw
REPLACE sw_set_pos
}
CLASS vechsw vecsw
{
REPLACE wn_init
REPLACE wn_draw
REPLACE sw_set_pos
}
CLASS veccm comman
{
REPLACE com_statwin
REPLACE com_mode_change
REPLACE com_file_change
REPLACE com_menu
REPLACE com_accl_check
REPLACE com_exit
ADD com_exit_lose
ADD com_about
ADD com_edit_symbol
ADD com_new_file
ADD com_open_file
ADD com_save_as
ADD com_save
ADD com_revert
ADD com_undo
ADD com_redo
ADD com_erase
ADD com_group
ADD com_ungroup
ADD com_move
ADD com_copy
ADD com_scale
ADD com_stretch
ADD com_rotate
ADD com_mirror
ADD com_break
ADD com_property
ADD com_line
ADD com_polyline
ADD com_arc_centre
ADD com_quadrant
ADD com_arc_3pt
ADD com_text
ADD com_box
ADD com_polygon
ADD com_circle
ADD com_symbol
ADD com_dim
ADD com_first
ADD com_second
ADD com_third
ADD com_fourth
ADD com_set_list
ADD com_snap
ADD com_layers
ADD com_set_text
ADD com_view
ADD com_set_pref
ADD com_set_print
ADD com_print
ADD com_jump
ADD com_zoom_to
ADD com_zoom_in
ADD com_zoom_out
ADD com_zoom_box
ADD com_zoom_extent
ADD com_zoom_actual
ADD com_zoom_width
ADD com_zoom_height
ADD com_zoom_factor
ADD com_dim_horiz
ADD com_dim_vert
ADD com_dim_align
ADD com_dim_angle
ADD com_dim_radius
ADD com_dim_dia
ADD com_jmp_abs
ADD com_jmp_cur_cart
ADD com_jmp_cur_polar
ADD com_jmp_last_cart
ADD com_jmp_last_polar
ADD com_jmp_end
ADD com_jmp_mid
ADD com_jmp_intersect
ADD com_jmp_centre
ADD com_jmp_quad
ADD com_jmp_perp
ADD com_jmp_tangent
ADD com_set_cursor
ADD com_select_box
ADD com_movement
ADD com_keyboard
ADD com_units
ADD com_page
ADD com_origin
ADD com_move_copy
ADD com_jump_box
ADD com_active_undo
ADD com_set_zoom
ADD com_create_sym
ADD com_ungroup_sym
ADD com_list_sym
ADD com_create_char
ADD com_create_space
ADD com_ungroup_char
ADD com_tog_snap
ADD com_tog_b_grid
ADD com_tog_g_grid
ADD com_tog_info
ADD com_tog_quick
ADD com_not_alloc
ADD com_not_yet
CONSTANTS
{
MENUBOP_EDIT 1
MENUOP_SYMBOL_EDIT 5
KEY_MAP_FIRST O_COM_NEW_FILE
}
}
CLASS ddata sgbuf
{
ADD dd_reset
ADD dd_rewind
ADD dd_set_pos
ADD dd_add
ADD dd_add_1st
ADD dd_insert
ADD dd_replace
ADD dd_safe_replace
ADD dd_delete
ADD dd_read
ADD dd_next
ADD dd_count
ADD dd_pos
CONSTANTS
{
SIZE_BYTE 0
TYPE_BYTE 1
BODY_BYTE 2
ATTR_BYTE 2
COUNT_BYTE 2
FLAG_BYTE 3
LAYER_BYTE 3
DATA_BYTE 4
LAYER_NAME_MAX 32
FONT_HEIGHT 2500
FONT_DESCEND 1000
TRIG45 11585
V_AGGR_BIT 32
BAND_LAYER 0x80
NEW_LAYER 0x40
PREV_LAYER 0x20
LAYER_FLAGS 0xf0
EL_EOD 0xffff
EL_BUFSIZE 256
O_DD_INIT O_SB_INIT
O_DD_SIZE O_SB_COUNT
}
TYPES
{
typedef short int SUNIT;
typedef struct
{
SUNIT x;
SUNIT y;
} S_PT;
typedef struct
{
S_PT pos;
S_PT lim;
} SRECT;
typedef struct
{
VOID* pfcb;
UWORD data;
UWORD chlist;
TEXT fname[LNAME_MAX_Z];
} FONT;
typedef struct
{
VOID* pfcb;
UWORD data;
UWORD symlist;
TEXT fname[LNAME_MAX_Z];
INT symcount;
SYMSET set;
} LIB;
typedef TE_TSTYLE TSTYLE;
typedef UWORD TBENT_SYM;
}
PROPERTY
{
UINT pos;
UINT rcount;
}
}
CLASS drgfile root
{
ADD df_init
ADD df_set_fname
ADD df_get_fname
ADD df_get_name
ADD df_save_file
ADD df_kill
ADD df_check_header
ADD df_read_file
TYPES
{
typedef struct
{
TEXT  fname[P_FNAMESIZE];
UWORD format;
} VECFBUF;
typedef struct
{
TEXT  sig[ SignatureSize ];
UWORD version;
UWORD hdrsize;
UWORD minver;
} DRGHDR;
}
PROPERTY
{
TEXT   fname[P_FNAMESIZE];
VOID*  pcb;
TEXT*  name;
DRGHDR hdr;
INT    ver;
INT    set;
}
}
CLASS undo root
{
ADD ud_init
ADD ud_set_msg
ADD ud_save
ADD ud_save_delete
ADD ud_save_insert
ADD ud_save_replace
ADD ud_save_move
ADD ud_undo
ADD ud_kill
ADD ud_block_beg
ADD ud_block_end
ADD ud_mark
ADD ud_roll_back
CONSTANTS
{
U_NULL 0
U_DELETE 1
U_INSERT 2
U_REPLACE 3
U_MOVE 4
U_ADD_SYM 5
U_DEL_SYM 6
U_FONT_CHAR 7
UNDO_BLOCK 0x01
UNDO_MARK 0x02
UNDO_NAMEMAX 9
}
TYPES
{
typedef struct
{
UWORD plen;
UBYTE com;
UBYTE flags;
UINT  hand;
INT   msg;
} UNDOSIG;
}
PROPERTY
{
VOID* pcb;
LONG  next;
UWORD plen;
TEXT  fn[P_FNAMESIZE];
TEXT  name[UNDO_NAMEMAX+1];
INT   block;
INT   first;
INT   nextmsg;
INT   mark;
PR_ROOT* op;
INT   HoldRedo;
}
}
CLASS escplotdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS plot root
{
ADD plot_init
ADD plot_open
ADD plot_close
ADD plot_prefix
ADD plot_postfix
ADD plot_draw
ADD plot_line
ADD plot_circle
ADD plot_arc
ADD plot_3pt_arc
CONSTANTS
{
PLOT_PCL5 0
PLOT_HPGL 1
PLOTERR_INIT_FAILED -1
}
TYPES
{
typedef struct
{
INT   OffsetX;
INT   OffsetY;
INT   Rotate;
} PLOTCUS;
}
PROPERTY 1
{
PR_ESCPLOTDLG* esc;
VOID* pcb;
VOID* tcb;
PLOTCUS set;
INT   cancel;
INT   downat;
LA_PT last;
}
}
CLASS pcl5plt plot
{
REPLACE plot_init
REPLACE plot_prefix
REPLACE plot_postfix
}
CLASS vec root
{
ADD dg_move_cursor
ADD dg_move_screen
ADD dg_snap_to_grid
ADD dg_set_zoom
CONSTANTS
{
VW_OFF 0x00
VW_HSCROLL 0x01
VW_VSCROLL 0x02
VW_SCROLL 0x03
VW_HRULER 0x04
VW_VRULER 0x08
VW_RULER 0x0c
VW_SSTATUS 0x10
VW_LSTATUS 0x20
VW_STATUS 0x30
VW_INFO 0x40
VW_CMD 0x80
VDL_FIRST 0x01
VDL_SECOND 0x02
VDL_THIRD 0x04
VDL_FOURTH 0x08
VDL_MAX 4
UNITS_CM 0
UNITS_MM 1
UNITS_INCH 2
UNITS_PT 3
Y_AXIS_DOWN 0
Y_AXIS_UP 1
PGDISP_PAGE 0x01
PGDISP_MARG 0x02
GRID_SNAP 0x01
GRID_GREY 0x02
GRID_BLACK 0x04
GRID_DISP 0x06
GRID_MINOR 0x0f
GRID_MAJOR 0xf0
MOVE_ACT_BALLISTIC 0
MOVE_ACT_SLOW_CUR 1
MOVE_ACT_FAST_CUR 2
MOVE_ACT_SLOW_WIN 3
MOVE_ACT_FAST_WIN 4
COM_ACT_SCALE 0x01
COM_ACT_STRETCH 0x02
COM_ACT_ROTATE 0x04
COM_ACT_MIRROR 0x08
COM_ACT_COPY 0x80
KEY_MAP_SIZE 36
UNIT_NAME_MAX 5
UNIT_NAME_MAX_Z 6
}
TYPES
{
typedef struct
{
UWORD space;
UBYTE flags;
UBYTE minor;
UBYTE major;
UBYTE showlist;
} GRIDSET;
typedef struct
{
S_PT  first;
A_PT  gap;
INT   upp;
INT   pps;
INT   gps;
INT   maj;
INT   col1st;
SUNIT maj1st;
INT   majgapy;
INT   majpps;
INT   majgps;
} GRID_DATA;
typedef struct
{
WORD mul;
WORD div;
} DSCALE;
typedef struct
{
UBYTE  spare;
UBYTE  papermul;
UBYTE  size;
UBYTE  orient;
} PAGESET;
typedef struct
{
TEXT    unitname[UNIT_NAME_MAX_Z];
GRIDSET grid;
DSCALE  scale;
PAGESET page;
} SET_PREF;
}
PROPERTY
{
UWORD DataOffset;
UWORD TableCount;
ARECT Page;
ARECT Scrn;
A_PT  Cur;
UBYTE yDir;
UBYTE spare1;
UWORD DispDp;
UWORD spare2;
UBYTE Units;
UBYTE Attr;
UWORD LayMask;
UBYTE Layer;
UBYTE ZoomPercent;
UBYTE View;
UBYTE DiamondList;
UBYTE DiamondView;
UBYTE Text;
ARECT DListScrn[VDL_MAX];
A_PT  DListCur[VDL_MAX];
SWORD DListUpp[VDL_MAX];
UWORD DListMask[VDL_MAX];
UBYTE DListLay[VDL_MAX];
A_PT  Orig;
SWORD upp;
UBYTE LastChar;
UBYTE MoveCopy;
UBYTE UndoOff;
UBYTE PgDisp;
SET_PREF Pref;
ARECT Marg;
UBYTE NewText;
UBYTE OffGrid;
AUNIT Nearest;
UWORD CurLib;
INT   CurSym;
UWORD SelectBox;
UWORD NewSym;
}
}
CLASS drg vec
{
ADD dg_init
ADD dg_update_cfg
ADD dg_read_file
ADD dg_reset_data_
ADD dg_next_marked
ADD dg_next_inrect
ADD dg_next_enclosed
ADD dg_next_pt_inrect
ADD dg_mark_el
ADD dg_make_sym_tab
ADD dg_make_char_tab
ADD dg_update_bound
ADD dg_process_el
ADD dg_clear_bitmap
ADD dg_draw_el
ADD dg_undraw_el
ADD dg_draw_all
ADD dg_draw_grey
ADD dg_redraw
ADD dg_get_layer_str
ADD dg_set_view
ADD dg_update_page
ADD dg_set_page
ADD dg_set_snap_grid
ADD dg_set_dlist
ADD dg_change_view
ADD dg_get_extent
ADD dg_zoom_to_box
ADD dg_get_font
ADD dg_get_lib
ADD dg_open_lib
ADD dg_set_fname
ADD dg_alert
ADD dg_cancel_retry
ADD dg_hypot
ADD dg_sq_root
ADD dg_su2au
ADD dg_adjust_scrn
ADD dg_test_upp
ADD dg_calc_intersect
ADD dg_calc_arc_cntr
ADD dg_calc_perp
ADD dg_break_circle
ADD dg_larc_to_3pt
ADD dg_3pt_to_larc
ADD dg_get_fbuf
ADD dg_normalise_rect
ADD dg_get_grey_bmid
ADD dg_get_black_bmid
ADD dg_get_bmhand
ADD dg_swap_bitmap
ADD dg_get_pic_head
ADD dg_average
ADD dg_long_div_uint
ADD dg_l_div_l_eq_l
ADD dg_centre_edge
ADD dg_create_band
ADD dg_make_laylist
ADD dg_make_fontlist
ADD dg_make_liblist
ADD dg_make_symlist
ADD dg_get_sym_index
ADD dg_get_sym_ref
ADD dg_get_textht_str
ADD dg_set_textht
ADD dg_get_angle_dbl
ADD dg_set_angle
ADD dg_calc_angle
ADD dg_adjust_lkdim
ADD dg_adjust_lkang
ADD dg_adjust_lkpt
ADD dg_new_class
ADD dg_get_scale_dbl
ADD dg_set_scale
ADD dg_adjust_lkel
ADD dg_set_text_rect
ADD dg_angle_in_arc
ADD dg_get_polar_pt
ADD dg_rel_polar_pt
ADD dg_rect_overlap
ADD dg_is_layer_on
ADD dg_dlg_title_s
ADD dg_dlg_set_s_au
ADD dg_dlg_get_s_au
ADD dg_dlg_set_s_lau
ADD dg_dlg_get_s_lau
ADD dg_dlg_set_s_rpt
ADD dg_lau_to_s_text
ADD dg_s_text_to_au
ADD dg_rpt_to_s_text
ADD dg_update_scale
ADD dg_snap_cursor
ADD dg_debug
CONSTANTS
{
DRAW_MODE_SET 0
DRAW_MODE_CLR 1
DRAW_MODE_INV 2
DRAW_MODE_TST 3
BL_OFF 0
BL_BLACK 1
BL_GREY 2
PO_NONE 0
PO_MOVE 1
PO_ROTATE 2
PO_SCALE 3
PO_MIRROR 4
PO_STRETCH 5
PO_PLOT 16
DG_LEAVE_SETTINGS 0
DG_CLEAR_SETTINGS 1
ACTION_DRAW 0x01
ACTION_STORE 0x02
FTYPE_DRAWING 0
FTYPE_TEMPLATE 1
FTYPE_LIBRARY 2
FTYPE_FONT 3
ALERT_CANCEL 0
ALERT_RETRY 1
BITMAP_BLACK 0
BITMAP_GREY 1
CFG_KEYS 0
CFG_MOVE 1
CFG_CURSOR 2
CFG_PRN 3
CURSIZE_SMALL 0
CURSIZE_MEDIUM 1
CURSIZE_LARGE 2
CURSIZE_FULL 3
CURCOLOR_BLACK 0
CURCOLOR_GREY 1
CURWIDTH_THIN 0
CURWIDTH_THICK 1
CURSELBOX_OFF 0
CURSELBOX_ON 1
PRNNAME_PCL5 0
PRNNAME_HPGL 1
PRNDEV_PARA 0
PRNDEV_SERIAL 1
PRNDEV_FILE 2
PRNDEV_IRLINK 3
QUICK_TOGGLE 0x00ff
QUICK_UPDATE 0x0100
PRIM_DRAW 0
PRIM_ISINRECT 1
PRIM_PLOT 2
}
TYPES
{
typedef struct
{
UBYTE keys;
UBYTE shift;
UBYTE ctrl;
UBYTE sh_ctrl;
UBYTE fast;
UBYTE slow;
} MOVESET;
typedef struct
{
UWORD size;
UBYTE color;
UBYTE width;
UWORD selbox;
} CURTYPE;
typedef struct
{
UBYTE name;
UBYTE device;
P_SRCHAR serport;
TEXT  fname[P_FNAMESIZE];
} PRN;
typedef struct
{
UBYTE   keys[KEY_MAP_SIZE];
MOVESET move;
CURTYPE cursor;
PRN     prn;
} CONFIG;
typedef struct
{
HANDLE bitmap;
INT    mode;
INT    width;
VOID*  dash;
} DATTR;
}
PROPERTY
{
PR_DRGFILE* DrgFile;
PR_VECDW* DWin;
PR_VECIW* IWin;
PR_VECVSW* VSWin;
PR_VECHSW* HSWin;
PR_PLOT*   Plot;
CONFIG     Cfg;
DOUBLE     DScale;
DOUBLE     PScale;
INT        MaxDp;
INT   RegFlag;
TEXT  RegName[18];
INT   GridDisp;
INT   GridAuto;
UINT  ChangedFlag;
UINT  FileType;
UINT  CmdID;
UINT  StepID;
INT   PropChanged;
SUNIT  sScrnPosX;
SUNIT  sScrnPosY;
A_PT   LastPt;
DATTR  DAttr;
SRECT  Clip;
SRECT* pClip;
SRECT* psInRect;
ARECT* paInRect;
UINT   IsInRect;
UINT   Primative;
UINT   Quick;
UINT   BandLayer;
FONT*  FontList;
INT    FontSize;
TSTYLE* TextList;
INT    TextSize;
INT    ProcessOp;
AUNIT  OffsetX;
AUNIT  OffsetY;
AUNIT  CentreX;
AUNIT  CentreY;
INT    CosQ;
INT    SinQ;
UINT   Divisor;
UINT   Scale;
UINT   Base;
ARECT  StretchRect;
UWORD  SymbolCount;
TBENT_SYM* SymbolList;
UINT*  CharList;
UWORD  LibCount;
LIB*   LibList;
TEXT*  LayStr[16];
UWORD  LayBufSize;
TEXT*  LayBuf;
}
}
CLASS lklist locs
{
REPLACE ls_filename
ADD lkl_create_list
PROPERTY
{
PR_VASTR* list;
INT count;
}
}
CLASS ftopen locs
{
REPLACE ls_filename
ADD fto_open
PROPERTY
{
FONT* pFont;
}
}
CLASS lkopen locs
{
REPLACE ls_filename
ADD lko_open
PROPERTY
{
LIB* pLib;
}
}
CLASS tpopen locs
{
REPLACE ls_filename
ADD tpo_open
PROPERTY
{
INT success;
}
}
CLASS deltmp locs
{
REPLACE ls_filename
}
CLASS band root
{
REPLACE destroy
ADD bnd_init
ADD bnd_on
ADD bnd_off
ADD bnd_draw
ADD bnd_set_next
PROPERTY
{
INT On;
INT OrigHidden;
ELEM* pel;
A_PT* Move;
A_PT* Ref ;
A_PT  pt;
A_PT  cpt;
INT   step;
}
}
CLASS bcircle band
{
REPLACE bnd_draw
TYPES
{
typedef struct
{
EL_CIRCLE circle;
A_PT cpt;
} CIRCLE_BAND_;
}
}
CLASS barc band
{
REPLACE bnd_draw
TYPES
{
typedef struct
{
EL_ARC arc;
A_PT pt;
A_PT cpt;
} ARC_BAND_;
}
}
CLASS bquad band
{
REPLACE bnd_draw
}
CLASS bdimh band
{
REPLACE bnd_draw
CONSTANTS
{
BDIMH_STEP_2 0
BDIMH_STEP_3 1
}
TYPES
{
typedef struct
{
EL_DIM dim;
INT    step;
A_PT   pt;
} DIM_BAND_;
}
}
CLASS bmove band
{
REPLACE bnd_draw
}
CLASS brotate band
{
REPLACE bnd_draw
}
CLASS bmirror band
{
REPLACE bnd_draw
}
CLASS bstretch band
{
REPLACE bnd_draw
}
CLASS bscale band
{
REPLACE bnd_draw
ADD bnd_set_scale
PROPERTY
{
INT doscale;
A_PT line[2];
}
}
CLASS bbreak band
{
REPLACE bnd_draw
}
CLASS opendlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
CONSTANTS
{
OPENDLG_NAME 1
OPENDLG_TYPE 3
OPENDLG_VEC 0
OPENDLG_DXF 1
OPENDLG_QCD 2
}
TYPES
{
typedef struct
{
TEXT fname[P_FNAMESIZE];
UINT format;
} OPENDLG_DATA;
}
}
CLASS cnewdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
REPLACE dl_changed
CONSTANTS
{
CNEWDLG_NAME 1
CNEWDLG_TEMPLATE 3
CNEWDLG_TYPE 4
}
TYPES
{
typedef struct
{
TEXT* fname;
TEXT  tplate[LNAME_MAX_Z];
} CNEWDLG_DATA;
}
PROPERTY
{
PR_VASTR* tplist;
}
}
CLASS savedlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
REPLACE dl_changed
REPLACE dl_launch_sub
CONSTANTS
{
SAVEDLG_NAME 1
SAVEDLG_USENEW 3
SAVEDLG_TYPE 4
SAVEDLG_EXPORT 5
SAVE_FTYPE_VEC 0
SAVE_FTYPE_VTP 1
SAVE_FTYPE_VSL 2
SAVE_FTYPE_VFT 3
SAVE_FTYPE_INTERNAL SAVE_FTYPE_VFT
SAVE_FTYPE_PIC 4
SAVE_FTYPE_PCX 5
SAVE_FTYPE_DXF 6
SAVE_FTYPE_QCD 7
}
TYPES
{
typedef struct
{
TEXT* fname;
INT   usenew;
INT   export;
INT   width;
INT   height;
INT   qcdres;
} SAVEDLG_DATA;
}
}
CLASS bmexpdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS qcdexpdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS listsymdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_changed
}
CLASS cspacedlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS setcurdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
CONSTANTS
{
SETCURDLG_SIZE 1
SETCURDLG_COLOR 2
SETCURDLG_WIDTH 3
SETCURDLG_SELBOX 4
SETCURDLG_SAVE 5
}
}
CLASS selboxdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS jmpboxdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS setmovedlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
CONSTANTS
{
SETMOVEDLG_CUR 1
SETMOVEDLG_CUR_SHIFT 2
SETMOVEDLG_CUR_CTRL 3
SETMOVEDLG_CUR_S_C 4
SETMOVEDLG_SLOW 5
SETMOVEDLG_FAST 6
SETMOVEDLG_SAVE 7
}
}
CLASS skeydlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
REPLACE dl_changed
CONSTANTS
{
SKEYDLG_KEY 1
SKEYDLG_COM 2
SKEYDLG_SAVE 3
}
PROPERTY
{
UBYTE keys[KEY_MAP_SIZE];
}
}
CLASS setzoomdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS sunitsdlg dlgbox
{
REPLACE dl_item_new
REPLACE dl_dyn_init
REPLACE dl_key
CONSTANTS
{
SUNITSDLG_PAPER 1
SUNITSDLG_DRAWING 2
SUNITSDLG_SCALE 3
SUNITSDLG_DECIMAL 4
}
}
CLASS dscaled mfne
{
REPLACE wn_init
REPLACE wn_set
REPLACE wn_sense
}
CLASS spagedlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
REPLACE dl_changed
REPLACE dl_focus
REPLACE dl_launch_sub
CONSTANTS
{
MARGIN_LEFT 0
MARGIN_TOP 1
MARGIN_RIGHT 2
MARGIN_BOTTOM 3
SPAGEDLG_TITLE 0
SPAGEDLG_SIZE 1
SPAGEDLG_ORIENT 2
SPAGEDLG_WIDTH 3
SPAGEDLG_HEIGHT 4
SPAGEDLG_MARGIN 5
SPAGEDLG_DISPLAY 6
SPAGEDLG_CUSTOM 0
SPAGEDLG_A4 1
SPAGEDLG_LETTER 2
SPAGEDLG_LANDSCAPE 0
SPAGEDLG_PORTRAIT 1
}
PROPERTY
{
AUNIT wd;
AUNIT ht;
AUNIT mg[4];
}
}
CLASS smargdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
CONSTANTS
{
SMARGDLG_TOP 1
SMARGDLG_LEFT 2
SMARGDLG_RIGHT 3
SMARGDLG_BOTTOM 4
}
}
CLASS sorigdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
CONSTANTS
{
SORIGDLG_X 1
SORIGDLG_Y 2
SORIGDLG_Y_DIR 3
}
}
CLASS showpgdlg dlgbox
{
REPLACE dl_dyn_init
CONSTANTS
{
SHOWPGDLG_WIDTH 1
SHOWPGDLG_HEIGHT 2
SHOWPGDLG_TOP 3
SHOWPGDLG_LEFT 4
SHOWPGDLG_BOTTOM 5
SHOWPGDLG_RIGHT 6
}
}
CLASS movcpydlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
CONSTANTS
{
MOVCPYDLG_SCALE 1
MOVCPYDLG_STRETCH 2
MOVCPYDLG_ROTATE 3
MOVCPYDLG_MIRROR 4
}
}
CLASS undodlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS sgriddlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS layerdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_set_size
REPLACE dl_key
PROPERTY
{
PR_VASTR* list;
UWORD current;
UWORD mask;
TEXT  name[16][UNAME_MAX_Z];
INT   changed;
}
}
CLASS laynamdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
TYPES
{
typedef struct
{
INT layer;
TEXT* name;
} LAYNAMDLG_DATA;
}
}
CLASS stextdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
TYPES
{
typedef struct
{
WORD key;
INT select;
TSTYLE ts;
} TEXTDLG_DATA;
}
PROPERTY
{
PR_VASTR* list;
UWORD current;
}
}
CLASS atextdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
REPLACE dl_changed
CONSTANTS
{
ATEXTDLG_NAME 1
ATEXTDLG_FONT 2
ATEXTDLG_UNITS 3
ATEXTDLG_SIZE 4
ATEXTDLG_ANGLE 5
}
PROPERTY
{
PR_VASTR* list;
UWORD current;
}
}
CLASS ctextdlg atextdlg
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS viewdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS scaledit mfne
{
REPLACE wn_init
REPLACE wn_set
REPLACE wn_sense
}
CLASS zoommagdlg dlgbox
{
REPLACE dl_item_new
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS dlistdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS aboutdlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS regdlg dlgbox
{
REPLACE dl_key
}
CLASS about2dlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
}
CLASS sprndlg dlgbox
{
REPLACE dl_dyn_init
REPLACE dl_key
REPLACE dl_changed
REPLACE dl_launch_sub
CONSTANTS
{
SPRNDLG_MODEL 1
SPRNDLG_DEVICE 2
SPRNDLG_SAVE 3
SPRNDLG_SER_CHAR 4
SPRNDLG_SER_HAND 5
SPRNDLG_FILE 6
}
}
CLASS dbdlg dlgbox
{
REPLACE dl_dyn_init
TYPES
{
typedef struct
{
INT rid;
INT code1;
INT code2;
TEXT* text;
} DB_DATA;
}
}
